How to add file support: https://stackoverflow.com/a/23843746/2829082

restrict setupController to only run in development

make sure errors are not leaked to user in production

remember to add actual font files...


***** Folder Structure of this APP *****
client: The source code for the client code will be kept here.
        Then using gulp tasks the optimized code will be put in the public folder.
config: App-wide configuration settings go here. Example: database credential management, app environment (dev, test, prod), etc.
controllers: The routes, logic for the app and database access goes here.
doc: Add supporting documents for the app.
models: The Schema design for the data goes here. There's a file for each model.
public: Everything that can be served to the client goes here. For example, optimized client code, assets, etc.
client/views: The Pug views for creating the HTML for the app goes here.


***** Long-Term Development *****
- Create API (text only) [Done]
- Create API Spec
- Start front end and deploy. Deliver something.
- Start backend interface.
- Handle Authentication (Use Passport.js)
- Handle File Uploads (Use busboy)
- Add Testing (for practice. Use Karma/Jasmine)


***** Tech Stack *****
Front-End:
    - Webpack: for module loading, bundling and optimizing
    - npm: for package management
    - ?: looking for a nice styling framework. preferably based on material and similar to bootstrap
    - ?: Front-End javaScript framework. Probably Angular, but could be AngularJS because I'm used to that but vue.js and React.js are also good candidates.


- Start calling the introduction section introduction, that way it won't clash with the parent introduction page.
    This might be a good chance to introduce e2e tests. or just test the APIs. I tried to refactor this and just realized
    I would have to go do a whole test of the API and a reset of the database data to refactor.
    Also, this is a good chace to put API URLs in a central place (no magic strings) that way changing the API endpoint URL would
    change it everywhere without messing things up
    I don't really have time for this because I want to make some progress on the frontend

- GearType instances could be called gear categories. Another opportunity to add and test testing

- Under the music section, the elements in the playlist array should be of type Song.

- In the video on the music section. Make the video controls disappear and come back on hover, use a timer.
    Add fade transition when dissapearing. Also add click video area to play/pause and big play button on the center when paused.
    Add functionality so that when prev button is pressed the current track gets rewined. use https://github.com/goldfire/howler.js#seekseek-id
    When a song ends. pause the player.

- find converter library (NPM) to convert uploaded video and audio files to browser compatible multiple files.

- Add the background image of Introduction as a field to the database. that way it can be changed.

- Find a way to have a central file with variables for gutter, container padding, etc that can be used both in
main.scss and in flex-layout directives. That means having a place for these variables and if I change one the value is reflected
everywhere.

- make cursor change on audioplayer items to let the user know they're clickable

- oops, forgot to use app prefixes in component names.. https://angular.io/guide/styleguide#02-07

- There's an issue that if you load the page with a screen size of xs or sm and resize the window to a bigger width the
transcription section height will be double. This is really uninportant because the responsive feature is for different screens
not for resizing. however, some people might stumble upon the bug and find it unpleasant/annoying. I think the problem can be resolved
by resetting the flexbox system or the slider width.

- change arrow style of sliders to be bigger angular brackets instead of the defaults.
Do this by copying the theme file from slick and changing it there.

- **SECURITY** Call the virtual police on the register and login pages. They take input from potentially untrusted users.
Joking aside, sanitize inputs and prevent code from being injected on the database from those inputs. Also, and very important,
users are going to be listed on the admin side, watch out for XSS attack. some todos in this list can be ignored NOT THIS ONE